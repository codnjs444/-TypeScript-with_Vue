// 타입 시스템

// 1. 타입의 종류
// '타입(Type) 은 자바스크립트에서 다루는 값의 '형태'에 대한 설명
// 여기서 '형태'란 값에 존재하는 속성과 메서드 그리고 내장되어 typeof 연산자가 설명하는 것을 의미
// 예를 들어, 다음과 같이 초깃값이 "https://mingo.team"인 변수를 생성하는 경우, 타입스크립트는 baseUrl 변수가 문자열 타입임을 유추할 수 있음

let baseUrl = "https://mingo.team";

// 타입스크립트의 가장 기본적인 타입은 자바스크립트의 기본 원시 타입을 포함
// string, number, boolean, undefined, null, symbol

// 또한, 타입스크립트는 계산된 초깃값을 갖는 변수의 타입을 유추할 수 있을 만큼 충분히 똑똑하다.

let nickname = Math.random() > 0.5 ? "밍고 크리에이터" : "등록된 닉네임이 없습니다."

// 타입 시스템(Type System)은 프로그래밍 언어가 프로그램에서 가질 수 있는 타입을 이해하는 방법에 대한 규칙 집합입니다.
// 기본적으로 타입스크립트의 타입 시스템은 다음과 같이 동작한다.

// - 코드를 읽고 존재하는 모든 타입과 값을 이해
// - 각 값이 초기 선언에서 가질 수 있는 타입을 확인
// - 각 값이 추후 코드에서 어떻게 사용될 수 있는지 모든 방법을 확인
// - 값의 사용법이 타입과 일치하지 않으면 사용자에게 오류를 표시

nickname.length;

// 타입스크립트는 다음과 같은 순서로 오류를 표시한다.
// - 코드를 읽고 baseUrl이라는 변수를 이해한다.
// - 초깃값이 "https://mingo.team" 이므로 baseUrl이 string 타입이라고 결론 짓는다.
// - baseUrl의 .length 멤버를 함수처럼 호출하는 코드를 확인한다.
// - string의 .length 멤버는 함수가 아닌 숫자라는 오류를 표시한다. 즉, 함수처럼 호출할 수 없다.

// 2. 할당 가능성
// 타입스크립트는 변수의 초깃값을 읽고 해당 변수가 허용되는 타입을 결정한다.
// 나중에 해당 변수에 새로운 값이 할당되면, 새롭게 할당된 값의 타입이 변수의 타입과 동일한지 확인한다.
// 타입스크립트 변수에 동일한 타입의 다른 값이 할당될 땐 문제가 없다.

// 예로 들어, 변수가 처음에 number 값으로 할당되었을 때, 후에 다른 number 타입의 값을 할당하는 것은 문제가 되지 않는다.
// 하지만 타입스크립트 변수에 다른 타입의 값이 할당되면 타입 오류가 발생한다.
// 예를 들어, 처음에는 String 값으로 변수를 선언한 다음 나중에 boolean 값을 넣을 수는 없다.

let username = "user123";
username = "안녕"
username = true; // 오류: 'boolean' 형식은 'string' 형식에 할당할 수 없다.

// 이렇게 타입스크립트에서 함수 호출이나 변수에 값을 제공할 수 있는지 여부를 확인하는 것을 할당 가능성이라고 한다.
// 즉, 전달된 값이 예상된 타입으로 할당 가능한지 여부를 확인한다.

// 3. 타입 에너테이션
// 때로는 변수에 타입스크립트가 읽어야 할 초깃값이 없는 경우도 있다. 타입스크립트는나중에 사용할 변수의 초기 타입을 파악하려고 시도하지 않습니다.
// 그래서 기본적으로 변수를 암묵적인 any 타입으로 간주한다.
// 즉, 변수는 세상의 모든 것이 될 수 있음을 나타냅니다. 초기 타입을 유추할 수 없는 변수는 진화하는 any라고 부른다.

let user; // 타입: any
user = "개발자 사람";
user.toUpperCase();

user = 1000;
user.toPrecision();
user.toUpperCase();